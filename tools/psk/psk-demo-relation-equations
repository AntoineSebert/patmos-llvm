#!/usr/bin/env ruby
#
# Small demo printing CFRG equations
require 'ostruct'
require 'optparse'
require 'yaml'

# Standard option parser
options = OpenStruct.new
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} file.pml"
  opts.on_tail("-h", "--help", "Show this message") { $stderr.puts opts; exit 0 }
end.parse!
if ARGV.length > 1 then $stderr.puts "Wrong number of arguments. Try --help" ; exit 1 ; end

data = YAML::load(ARGV.first ? File.new(ARGV.first) : $<)

# small helpers to specify equations
def equation(lhs,rhs)
  "#{lhs.join(" + ")} = #{rhs.join(" + ")}"
end
# sum n \in pred(node), n -- [ty] --> node
def ins(node,ty)
  node["#{ty}-predecessors"].map { |n|
    "#{lab($nodes[n],ty)}->#{lab(node,ty)}"
  }
end
# sum n \in succ(node), node -- [ty] --> n
def out(node,ty)
  node["#{ty}-successors"].map { |n|
    "#{lab(node,ty)}->#{lab($nodes[n],ty)}"
  }
end
def scope(scope)
  ["function::#{scope['function']}"]
end
def lab(node,ty)
  label = node["#{ty}-block"]
  label = "exit" if node['type'] == 'exit'
  label
end

# For all relation graphs
puts data.keys.inspect
data['relation-graphs'].each do |rg|
  puts "Src: #{rg['src'].inspect}"
  puts "Dst: #{rg['dst'].inspect}"
  # first, add predecessors information
  nodes = rg['nodes']
  nodes.each do |n1|
    (n1['src-successors']||=[]).each do |n2|
      (nodes[n2]['src-predecessors'] ||= []) << n1['name']
    end
    (n1['dst-successors']||=[]).each do |n2|
      (nodes[n2]['dst-predecessors'] ||= []) << n1['name']
    end
  end

  # (1) for src nodes, inSCR = outSRC
  # (2) for dst nodes, inDST = outDST
  # (3) for progress nodes, (1),(2),inSRC=inDST,outSRC=outDST
  # (4) for entry nodes, outSRC = outDST = 1
  # (5) for exit nodes, inSRC = inDST = 1
  $nodes=nodes
  $equations = []
  def eq(lhs,rhs); $equations.push(equation(lhs,rhs)); end
  $nodes.each do |node|
    if node['type'] == 'entry'
      eq(out(node,'src'),scope(rg['src']))
      eq(out(node,'dst'),scope(rg['dst']))
    elsif node['type'] == 'exit'
      eq(ins(node,'src'),scope(rg['src']))
      eq(ins(node,'dst'),scope(rg['dst']))
    else
      eq(ins(node,'src'),out(node,'src')) if node['type'] != 'dst'
      eq(ins(node,'dst'),out(node,'dst')) if node['type'] != 'src'
      eq(ins(node,'src'),ins(node,'dst')) if node['type'] == 'progress'
      eq(out(node,'src'),out(node,'dst')) if node['type'] == 'progress'
    end
  end
  $equations.uniq.each do |eq|
    puts eq
  end
end
