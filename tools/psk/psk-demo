#!/usr/bin/env ruby
#
# PSK demo driver
#
# TODO: (partly) integrate into clang

require 'yaml'
require 'ostruct'
require 'optparse'

# Default Settings
CMD_SWEET="sweet" # set to nil to disable analysis with SWEET
CMD_ALF_LLC="alf-llc"
PATMOS_LLVM_LD_BIN="patmos-llvm-ld"
PATMOS_LD_BIN="patmos-ld"
LEVEL="../.."
BUILDDIR="build"

($stderr.puts "Neccessary tool #{PATMOS_LLVM_LD_BIN} not found using 'which'";exit 1) if `which patmos-llvm-ld`.empty?
PATMOS_PATH=File.join(File.dirname(`which patmos-ld`),"..")

# local build commands
LLC="%<bin>s -march=patmos -mforce-block-labels -mpatmos-serialize=%<pml>s -filetype=obj -o %<of>s %<if>s"

# cannot use CLANG inside build dir (missing libs)
PATMOS_CLANG="%<patmos>s/bin/patmos-clang -Xllc --serialize=%<pml>s -o %<of>s %<if>s" 

# patmos commands
PATMOS_PASIM="%<patmos>s/bin/pasim -q --debug 1 -b %<if>s 2>%<tracefile>s"
PATMOS_LLVM_LD="%<patmos>s/bin/#{PATMOS_LLVM_LD_BIN} -emit-llvm -L%<patmos>s/patmos-unknown-elf/lib/ -b %<of>s %<patmos>s/patmos-unknown-elf/lib/crt0.o %<if>s -internalize-public-api-file=%<patmos>s/patmos-unknown-elf/lib/libcsyms.lst %<patmos>s/patmos-unknown-elf/lib/libcsyms.o -lc -lpatmos -internalize-public-api-file=%<patmos>s/patmos-unknown-elf/lib/librtsfsyms.lst %<patmos>s/patmos-unknown-elf/lib/librtsfsyms.o -lrtsf -internalize-public-api-file=%<patmos>s/patmos-unknown-elf/lib/librtsyms.lst %<patmos>s/patmos-unknown-elf/lib/librtsyms.o -lrt -internalize-public-api-list=_start,main -no-script"
PATMOS_LD="%<patmos>s/bin/#{PATMOS_LD_BIN} -o %<of>s -nostdlib -static --defsym _uart_status_base=0xF0000000 --defsym _uart_data_base=0xF0000004 --defsym _shadow_stack_base=0x4000000 --defsym _shadow_stack_base=0x4000000 --defsym _stack_cache_base=0x3000000 --defsym __heap_end=0x2000000 --defsym __heap_start=end %<if>s"
# psk tools
MERGE="%<psk>s/psk-merge -o %<of>s %<ifs>s"
FF2PML="%<psk>s/psk-ff2pml -o %<of>s %<if>s"
EXTRACT_SYMBOLS="%<psk>s/psk-extract-symbols -i %<if>s -o %<of>s %<elf>s"
ANALYZE_TRACE="%<psk>s/psk-analyze-trace -i %<if>s -o %<of>s %<elf>s"
DEMO_EQUATIONS="%<psk>s/psk-demo-equations %<if>s"
PML2AIS="%<psk>s/psk-pml2ais --header -o %<ais>s -a %<apx>s -b %<elf>s -e main -r %<report>s -x %<result>s %<if>s"

# external tools
BC2ALF="%<bin>s -march=alf -alf-standalone -alf-memory-areas=0x0000-0xffff -o=%<of>s %<if>s"
ALF2FF="%<bin>s -i=%<if>s func=main -ae ffg=ub vola=t pu -f co o=%<of>s"
class Demo
  attr_accessor :outdir, :logfile
  attr_writer :level, :builddir, :binprefix
  # external commands
  attr_accessor :cmd_sweet, :cmd_alf_llc
  def initialize
    @step = 1
    @outdir,@logfile=".","log"
    @level,@builddir,@binprefix=LEVEL,BUILDDIR,""
    @cmd_sweet,@cmd_alf_llc = CMD_SWEET, CMD_ALF_LLC
  end
  def run_patmos(cmd, arghash)
    arghash[:patmos] = PATMOS_PATH
    run(cmd, arghash)
  end
  def run_build(cmd, bin, arghash)
    arghash[:bin] = File.join(File.dirname(__FILE__),@level,@builddir,"bin","#{@binprefix}#{bin}")
    run(cmd, arghash)
  end
  def run_psk(cmd, arghash)
    arghash[:psk] = File.join(File.dirname(__FILE__))
    run(cmd, arghash)
  end

  # output
  def Demo.escape_seq(c) ;"\x1b[#{c}m"; end
  BLACK,RED,GREEN,YELLOW,BLUE,MAGENTA,CYAN,WHITE=(0..7).map {|c| escape_seq(c+30)}
  DEFCOLOR=escape_seq(39)
  def step(msg); info("[#{@step}] #{msg}") ; @step+=1; end
  def sep; $stderr.puts("-"*78); end
  def info(msg)
    $stderr.puts   "[ INFO  ] #{msg}"
  end

  # running
  def run(cmdstring,arghash)
    cmd = cmdstring % arghash
    system("echo '***' #{cmd} >>#{@logfile}")
    cmdstring = cmd
    cmdstring = "#{cmdstring} >>#{@logfile} 2>&1" unless arghash[:noredirect]
    if system(cmdstring)
      $stderr.puts "#{GREEN }[SUCCESS] #{CYAN}#{cmd}#{DEFCOLOR}"
    else
      $stderr.puts "#{RED   }[FAILED!] #{cmd}#{DEFCOLOR}"
      $stderr.puts "Consult log file: #{@logfile}"
      exit 1
    end
  end
end

def die(msg) ; $stderr.puts msg ; exit 1 ; end

# Standard option parser
demo = Demo.new
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [OPTIONS] program.bc"
  opts.on("-O", "--outdir DIR", "directory for output files (default: .)") { |dir| demo.outdir = dir }
  opts.on("", "--alf-llc-command CMD", "path to alf-llc executable") { |cmd| demo.cmd_alf_llc=cmd }
  opts.on("", "--sweet-command CMD", "path to SWEET executable") { |cmd| demo.cmd_sweet=cmd }
  opts.on_tail("-h", "--help", "Show this message") { $stderr.puts opts; exit 0 }
end.parse!

die "Wrong number of arguments. Try --help" unless ARGV.length==1

bc,mod=ARGV[0],ARGV[0].sub(/\..*$/,'')
die "File #{bc} does not exist" unless File.exist?(bc)

file = Proc.new { |suffix| File.join(demo.outdir, "#{File.basename(mod)}.#{suffix}") }
demo.logfile = file.call("log")

system("echo PSK-DEMO > #{demo.logfile}")

demo.info("================")
demo.info("   PSK Demo     ")
demo.info("================")
demo.info("Takes an optimized bitcode file (not yet linked with libc)")
demo.info("and performs various tasks using the PSK tool chain")
demo.sep

demo.step("Link application with patmos-newlib (bitcode level)")
demo.run_patmos(PATMOS_LLVM_LD, :if=>bc, :of=> file.call("elf.bc"))

demo.step("Run backend, and export LLVM-internal information to YML")
demo.run_build(LLC, "llc", :if => file.call("elf.bc"), :pml => file.call("elf.pml"), :of=>file.call("elf.o"))

demo.step("Merge PML streams to one YAML document")
demo.run_psk(MERGE, :ifs => file.call("elf.pml"), :of=>file.call("elf.pml"))

demo.step("Link ELF binary")
demo.run_patmos(PATMOS_LD, :if=>file.call("elf.o"), :of=>file.call("elf"))

demo.step("Extract addresses from ELF binary")
demo.run_psk(EXTRACT_SYMBOLS, :if => file.call("elf.pml"), :of => file.call("elf.pml"), :elf => file.call("elf"))

demo.step("Analyze trace generated using pasim")
#demo.run_patmos(PATMOS_PASIM, :if=>file.call("elf"), :tracefile=>file.call("trace"), :noredirect => true)
demo.run_psk(ANALYZE_TRACE, :if=> file.call("elf.pml"), :of => file.call("elf.pml"), :elf => file.call("elf"),
             :noredirect => true)

if CMD_SWEET
demo.step("Generate Flow Fact file using Abstract Execution")
demo.run(BC2ALF, :bin => demo.cmd_alf_llc, :if => bc, :of => file.call("alf"))
demo.run(ALF2FF, :bin => demo.cmd_sweet,   :if => file.call("alf"), :of => file.call("ff"))

demo.step("Add Flow Facts to PML file")
demo.run_psk(FF2PML, :if => file.call("ff"), :of => file.call("ff.pml"))

demo.step("Merge elf.pml and ff.pml into one YAML document")
demo.run_psk(MERGE, :ifs => "#{file.call("elf.pml")} #{file.call("ff.pml")}", :of => file.call("elf.pml"))
end

demo.step("Display control-flow relation graph equations and flow fact inequalities")
demo.run_psk(DEMO_EQUATIONS, :if => "#{file.call("elf.pml")}") #,:noredirect => true)

demo.step("Export information to aiT's ais format")
demo.run_psk(PML2AIS, :if => file.call("elf.pml"), :ais => file.call("ais"),
             :apx => file.call("apx"), :elf => file.call("elf"),
             :report => file.call("report"), :result => file.call("xml"))
