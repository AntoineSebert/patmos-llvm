#!/usr/bin/env ruby
#
# PSK demo driver
#
# TODO: (partly) integrate into clang

require 'yaml'
require 'ostruct'
require 'optparse'

# Default Settings
LEVEL="../.."
BUILDDIR="build"
CMD_SWEET="sweet"
CMD_ALF_LLC="alf-llc"

BC2ALF="%<bin>s -march=alf -alf-standalone -alf-memory-areas=0x0000-0xffff -o=%<of>s %<if>s"
ALF2FF="%<bin>s -i=%<if>s func=main -ae ffg=ub vola=t pu -f co o=%<of>s"
BC2YML="%<bin>s -march=patmos --serialize=%<of>s -o /dev/null %<if>s"
PMLMERGE="%<bin>s -o %<of>s %<ifs>s"
FF2PML="%<bin>s -o %<of>s %<if>s"
DEMOEQS="%<bin>s %<if>s"
class Demo
  attr_accessor :outdir
  attr_writer :level, :builddir, :binprefix
  attr_accessor :cmd_sweet, :cmd_alf_llc
  attr_accessor :bc2alf, :alf2ff, :bc2yml, :pmlmerge, :ff2pml, :demoeqs
  def initialize
    @outdir = "."
    @level,@builddir,@binprefix=LEVEL,BUILDDIR,""
    @cmd_sweet,@cmd_alf_llc = CMD_SWEET, CMD_ALF_LLC
    @bc2alf,@alf2ff,@bc2yml,@pmlmerge,@ff2pml = BC2ALF, ALF2FF, BC2YML,PMLMERGE,FF2PML
    @demoeqs=DEMOEQS
  end
  def run_build(cmdname, bin, arghash)
    arghash[:bin] = File.join(File.dirname(__FILE__),@level,@builddir,"bin","#{@binprefix}#{bin}")
    run(self.send(cmdname), arghash)
  end
  def run_psk(cmdname, bin, arghash)
    arghash[:bin] = File.join(File.dirname(__FILE__),"psk-#{bin}")
    run(self.send(cmdname), arghash)
  end
  def run_custom(cmdname, arghash)
    run(self.send(cmdname),arghash)
  end
  BLACK,RED,GREEN,YELLOW,BLUE=(0..4).map {|c|"\x1b[#{30+c}m"}
  def sep; $stderr.puts("-"*78); end
  def info(msg)
    $stderr.puts   "#{BLUE  }[ INFO  ] #{msg}#{BLACK}"
  end
  def run(cmdstring,arghash)
    cmd = cmdstring % arghash
    #$stderr.puts   "#{YELLOW}[ START ]#{BLACK} #{cmd}"
    if system(cmd)
      $stderr.puts "#{GREEN }[SUCCESS]#{BLACK} #{cmd}"
    else
      $stderr.puts "#{RED   }[FAILED!] #{cmd}#{BLACK}"
      exit 1
    end
  end
end


# Standard option parser
demo = Demo.new
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [OPTIONS] program.elf program.ll"
  opts.on("-O", "--outdir DIR", "directory for output files (default: .)") { |dir| demo.outdir = dir }
  opts.on("", "--alf-llc-command CMD", "path to alf-llc executable") { |cmd| demo.cmd_alf_llc=cmd }
  opts.on("", "--sweet-command CMD", "path to SWEET executable") { |cmd| demo.cmd_sweet=cmd }
  opts.on_tail("-h", "--help", "Show this message") { $stderr.puts opts; exit 0 }
end.parse!
if ARGV.length != 2 then $stderr.puts "Wrong number of arguments. Try --help" ; exit 1 ; end
elf,bc,mod=ARGV[0],ARGV[1],ARGV[0].sub(/.elf$/,'')
file = Proc.new { |suffix| File.join(demo.outdir, "#{File.basename(mod)}.#{suffix}") }

demo.info("================")
demo.info("   PSK Demo     ")
demo.info("================")
demo.info("Currently, it is necessary to pass the built ELF file, and the")
demo.info("(optimized) bitcode file *without* libc stuff (because of abort, exit, etc.)")
demo.sep

demo.info("(1) Build and Export LLVM-internal information to YML")
demo.run_build(:bc2yml,"llc", :if=>bc, :of => file.call("bc.pml"))

demo.info("(2) Generate Flow Fact file using Abstract Execution")
demo.run_custom(:bc2alf, :bin => demo.cmd_alf_llc, :if => bc, :of => file.call("alf"))
demo.run_custom(:alf2ff, :bin => demo.cmd_sweet,   :if => file.call("alf"), :of => file.call("ff"))

demo.info("(3) Add Flow Facts to PML file")
demo.run_psk(:ff2pml, "ff2pml", :if => file.call("ff"), :of => file.call("ff.pml"))

demo.info("(4) Merge bc.pml documents and ff.pml into one YAML document")
demo.run_psk(:pmlmerge, "merge", :ifs => "#{file.call("bc.pml")} #{file.call("ff.pml")}", :of => file.call("pml"))

demo.info("(5) Display control-flow relation graph equations and flow fact inequalities")
demo.run_psk(:demoeqs, "demo-equations", :if => "#{file.call("pml")}")
